# -*- mode: ruby -*-
# vi: set ft=ruby :
ENV['VAGRANT_EXPERIMENTAL'] = 'disks'


Vagrant.configure("2") do |config|
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  config.vm.box = "almalinux/8"

  # The base Vagrant box supports VirtualBox and Libvirt 

  # This is the VirtualBox VM solution. Use this if you can, as it has more options and optimizations
  config.vm.provider "virtualbox" do |vb|
    vb.name = "AlmaLinux8_CMD"
    # If you can afford it, more memory is always welcome :)
    vb.memory = 2048
    # If you can afford it, more cores are always welcome :)
    vb.cpus = 2
    vb.gui = true

    # Base configuration
    vb.customize ["modifyvm", :id, "--audio", "none"]        
    vb.customize ["modifyvm", :id, "--clipboard-mode", "bidirectional"]
    vb.customize ["modifyvm", :id, "--description", "AlmaLinux 8 base image without GUI"]    
    vb.customize ["modifyvm", :id, "--ostype", "RedHat_64"]

    # High-performance configuration: please note that several of these options are not available in the VirtualBox GUI
    # Thus, the performance of this machine should be higher than the ones created via GUI

    # Use VBoxManage to customize the VM for high-performance options and other things
    vb.customize ["modifyvm", :id, "--acpi", "on"]
    vb.customize ["modifyvm", :id, "--accelerate3d", "on"]
    vb.customize ["modifyvm", :id, "--apic", "on"]    
    vb.customize ["modifyvm", :id, "--biosapic", "x2apic"]  
    vb.customize ["modifyvm", :id, "--cpu-profile", "host"]
    vb.customize ["modifyvm", :id, "--graphicscontroller", "vmsvga"]
    vb.customize ["modifyvm", :id, "--hpet", "on"]
    vb.customize ["modifyvm", :id, "--hwvirtex", "on"]
    vb.customize ["modifyvm", :id, "--largepages", "on"]
    vb.customize ["modifyvm", :id, "--longmode", "on"]
    vb.customize ["modifyvm", :id, "--nestedpaging", "on"]            
    vb.customize ["modifyvm", :id, "--pae", "on"]
    vb.customize ["modifyvm", :id, "--pagefusion", "on"]
    vb.customize ["modifyvm", :id, "--rtcuseutc", "on"]
    vb.customize ["modifyvm", :id, "--spec-ctrl", "off"]
    vb.customize ["modifyvm", :id, "--x2apic", "on"]
    vb.customize ["modifyvm", :id, "--vram", "64"]
    vb.customize ["modifyvm", :id, "--vtxux", "on"]  
    vb.customize ["modifyvm", :id, "--vtxvpid", "on"]
		    
    vb.customize ["storagectl", :id, "--name", "SATA Controller", "--hostiocache", "on"]

     # Shared folder (host path, guest path)
    # config.vm.synced_folder "./shared", "/host_data"
     
     # Enable provisioning with a custom shell script.     
     config.vm.provision "file", source: "nanorc", destination: "/home/vagrant/.nanorc"     
     config.vm.provision "file", source: "tmux.conf", destination: "/home/vagrant/tmux.conf"
     config.vm.provision "shell", path: "provision_vbox.sh"
  end
  
  # Untested VMWare Desktop very basic configuration
  config.vm.provider :libvirt do |libvirt|
    libvirt.driver = "kvm"
    # Change the driver depending on your installation
    # libvirt.driver = "qemu"
    
    libvirt.cpus = 2
    libvirt.memory = 2048
    libvirt.storage_pool_name = "default"
    libvirt.disk_driver :cache => 'default'
    config.vm.provision "file", source: "nanorc", destination: "/home/vagrant/.nanorc"     
    config.vm.provision "file", source: "tmux.conf", destination: "/home/vagrant/tmux.conf"
    config.vm.provision "shell", path: "provision_libvirt.sh"
  end
  
  # This is the Hyper-V solution, for Windows hosts. Vagrant provides much less control for Hyper-V guests. 
  # WARNING: Video might lag in GUI mode. 
  config.vm.provider "hyperv" do |hv|
    hv.vmname = "UbuntuSSI"
    # If you can afford it, more memory is always welcome :)
    hv.memory = 2048
    # If you can afford it, more cores are always welcome :)
    hv.cpus = 2
    
    # Shared folders in Hyper-V are disabled because it uses the vulnerable SMBv1 protocol.
    # Additionally, the base box used does not support SMB 
    config.vm.synced_folder ".", "/vagrant", disabled: true
    
    # This tries to give you the best possible Hyper-V user experience with the machine
    hv.enable_enhanced_session_mode = true
    hv.vm_integration_services = {
        guest_service_interface: true,
        heartbeat: true,
        key_value_pair_exchange: true,
        shutdown: true,
        time_synchronization: true,
        vss: true,
    }

    # Enable provisioning with a custom shell script.
    config.vm.provision "file", source: "nanorc", destination: "/home/vagrant/.nanorc"     
    config.vm.provision "file", source: "tmux.conf", destination: "/home/vagrant/tmux.conf"
    config.vm.provision "shell", path: "provision_hv.sh"
  end
  

  
  # Untested VMWare Desktop very basic configuration
  config.vm.provider "vmware_desktop" do |vmw|
    vmw.gui = true
    vmw.vmx["memsize"] = "2048"
    vmw.vmx["numvcpus"] = "2"
    config.vm.provision "file", source: "nanorc", destination: "/home/vagrant/.nanorc"     
    config.vm.provision "file", source: "tmux.conf", destination: "/home/vagrant/tmux.conf"
    config.vm.provision "shell", path: "provision_vmware.sh"
  end

  # Disk size
  config.vm.disk :disk, size: "60GB", primary: true
end
